{
	"comment": "Luax Syntax: version 1.1.1",
	"fileTypes": [
		"luax"
	],
	"firstLineMatch": "\\A#!.*?\\bluax(\\d+(\\.\\d+)?)?\\b|\\A--\\s+-\\*-\\s*luax2\\s*-\\*-",
	"keyEquivalent": "^~L",
	"name": "Luax",
	"scopeName": "source.luax",
	"patterns": [
		{
			"include": "#root"
		}
	],
	"repository": {
		"root": {
			"patterns": [
				{
					"include": "#line-comment"
				},
                                {
                                         "include": "#attribute"
                                },
                                {
                                         "include": "#class-definition"
                                }
			]
		},
                "class-content": {
			"patterns": [
				{
					"include": "#line-comment"
				},
				{
					"include": "#property"
				},
                                {
                                        "include": "#attribute"
                                },
				{
					"include": "#function"
				},
				{
					"include": "#external"
				},
				{
					"include": "#const-decl"
				}
			]
		},
		"attribute": {
			"name": "meta.constant.lua",
			"begin": "(@)([_[:alpha:]][_[:alnum:]]*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "storage.type.constant.lua"
				},
				"2": {
					"name": "entity.other.attribute-name.lua"
				},
				"3": {
					"name": "punctuation.separator.parameter.lua"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.separator.parameter.lua"
				}
			},
			"patterns": [
				{
					"include": "#number"
				},
				{
					"include": "#constant"
				},
				{
					"include": "#single-quote-string"
				},
				{
					"include": "#double-quote-string"
				},
				{
					"name": "punctuation.separator.parameter.lua",
					"match": ","
				}
			]
		},
		"const-decl": {
			"name": "meta.constant.lua",
			"begin": "\\b(const)\\s+([_[:alpha:]][_[:alnum:]]*)\\s*(\\=)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.constant.lua"
				},
				"2": {
					"name": "variable.other.lua"
				},
				"3": {
					"name": "punctuation.separator.parameter.lua"
				}
			},
			"end": ";",
			"endCaptures": {
				"0": {
					"name": "punctuation.separator.parameter.lua"
				}
			},
			"patterns": [
				{
					"include": "#number"
				},
				{
					"include": "#constant"
				},
				{
					"include": "#single-quote-string"
				},
				{
					"include": "#double-quote-string"
				}
			]
		},
		"var-decl-in-func": {
			"name": "meta.property.lua",
			"begin": "\\b(var)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.var.lua"
				}
			},
			"end": "(?<=;)",
			"endCaptures": {
				"0": {
					"name": "punctuation.separator.parameter.lua"
				}
			},
			"patterns": [
				{
					"include": "#var-declaration"
				}
			]
		},
		"property": {
			"name": "meta.property.lua",
			"begin": "\\b(?:(public|private|internal)\\s+)?(?:(static)\\s+)?(var)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.public.lua"
				},
				"2": {
					"name": "storage.modifier.static.lua"
				},
				"3": {
					"name": "storage.type.var.lua"
				}
			},
			"end": "(?<=;)",
			"endCaptures": {
				"0": {
					"name": "punctuation.separator.parameter.lua"
				}
			},
			"patterns": [
				{
					"include": "#var-declaration"
				}
			]
		},
		"var-declaration": {
			"name": "meta.property.lua",
			"begin": "\\b([_[:alpha:]][_[:alnum:]]*)\\s*:\\s*\\b(int|string|real|boolean|datetime|[_[:alpha:]][_[:alnum:]]*)\\b",
			"beginCaptures": {
				"1": {
					"name": "variable.other.lua"
				},
				"2": {
					"name": "support.type.lua"
				}
			},
			"end": "(;|(,(?!\\s*;)))",
			"patterns": [
				{
					"name": "punctuation.separator.parameter.lua",
					"match": "\\[\\s*\\]"
				},
				{
					"name": "variable.parameter.lua",
					"match": "\\s*"
				}
			]
		},
 		"param-declaration": {
			"name": "meta.property.lua",
			"begin": "\\b([_[:alpha:]][_[:alnum:]]*)\\s*:\\s*\\b(int|string|real|boolean|datetime|[_[:alpha:]][_[:alnum:]]*)\\b",
			"beginCaptures": {
				"1": {
					"name": "variable.parameter.lua"
				},
				"2": {
					"name": "support.type.lua"
				}
			},
			"end": "(\\)|(,(?!\\s*\\))))",
			"patterns": [
				{
					"name": "punctuation.separator.parameter.lua",
					"match": "\\[\\s*\\]"
				},
				{
					"name": "variable.parameter.lua",
					"match": "\\s*"
				}
			]
		},
               "general" : {
			"patterns": [
				{
					"include": "#typename"
				},
				{
					"include": "#cast"
				},
				{
					"include": "#var-decl-in-func"
				},
				{
					"include": "#const-decl"
				},
				{
					"include": "#line-comment"
				},
				{
					"include": "#block-comment"
				},
				{
					"include": "#number"
				},
				{
					"include": "#constant"
				},
				{
					"include": "#single-quote-string"
				},
				{
					"include": "#double-quote-string"
				},
				{
					"include": "#if-block"
				},
				{
					"include": "#try-block"
				},
				{
					"include": "#for-block"
				},
				{
					"include": "#while-block"
				},
				{
					"include": "#repeat-block"
				},
				{
					"include": "#logic-operator"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#keyword"
				},
				{
					"include": "#support-function-call"
				},
				{
					"include": "#support-string-function-call"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#string-function-call"
				},
				{
					"include": "#table"
				},
				{
					"include": "#array"
				},
				{
					"include": "#table-property"
				},
				{
					"include": "#language-variable"
				},
				{
					"include": "#support-variable"
				},
				{
					"include": "#variable"
				}
			]
                },
		"typename": {
			"name": "meta.cast.lua",
			"begin": "\\b(typename)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "variable.language.cast.lua"
				},
				"2": {
					"name": "punctuation.separator.parameter.lua"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.separator.parameter.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"cast": {
			"name": "meta.cast.lua",
			"begin": "\\b(cast)\\s*(\\<)\\s*([_[:alpha:]][_[:alnum:]]*)\\s*(\\>)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "variable.language.cast.lua"
				},
				"2": {
					"name": "punctuation.separator.parameter.lua"
				},
				"3": {
					"name": "entity.other.inherited-class.lua"
				},
				"4": {
					"name": "punctuation.separator.parameter.lua"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.separator.parameter.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"line-comment": {
			"name": "comment.line.double-dash.lua",
			"match": "(--)(?!(\\[=*\\[|\\]=*\\])).*$\n?",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.lua"
				}
			}
		},
		"constant": {
			"name": "constant.language.lua",
			"match": "\\b(nil|true|false|_G|_VERSION|\\.\\.\\.)\\b"
		},
		"number": {
			"name": "constant.numeric.lua",
			"match": "(?<![\\d.])\\b0x[a-fA-F\\d]+|\\b\\d+(\\.\\d+)?([eE]-?\\d+)?|\\.\\d+([eE]-?\\d+)?"
		},
		"single-quote-string": {
			"name": "string.quoted.single.lua",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lua"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.lua"
				}
			},
			"patterns": [
				{
					"match": "\\\\(\\d{1,3}|.)",
					"name": "constant.character.escape.lua"
				}
			]
		},
		"double-quote-string": {
			"name": "string.quoted.double.lua",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lua"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.lua"
				}
			},
			"patterns": [
				{
					"match": "\\\\(\\d{1,3}|.)",
					"name": "constant.character.escape.lua"
				}
			]
		},
		"if-block": {
			"name": "meta.if-block.lua meta.block.lua",
			"begin": "\\bif\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"try-block": {
			"name": "meta.try-block.lua meta.block.lua",
			"begin": "\\btry\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"for-block": {
			"name": "meta.for-block.lua meta.block.lua",
			"begin": "\\bfor\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"while-block": {
			"name": "meta.while-block.lua meta.block.lua",
			"begin": "\\bwhile\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"repeat-block": {
			"name": "meta.repeat-block.lua meta.block.lua",
			"begin": "\\brepeat\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"end": "\\buntil\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"logic-operator": {
			"name": "keyword.operator.logic.lua",
			"match": "\\b(and|or|not)\\b"
		},
		"operator": {
			"name": "keyword.operator.lua",
			"match": "(\\+|-|%|#|\\*|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.))"
		},
		"keyword": {
			"name": "keyword.control.lua",
			"match": "\\b(throw|try|catch|break|do|else|for|if|elseif|return|then|repeat|while|until|end|local|in)\\b"
		},
		"class-definition": {
			"name": "meta.class.lua",
			"begin": "\\b(class)\\s+([_[:alpha:]][_[:alnum:]]*)(\\s+(:)\\s+([_[:alpha:]][_[:alnum:]]*))?",
			"end": "\\bend\\b",
			"beginCaptures": {
				"1": {
					"name": "support.class.lua"
				},
				"2": {
					"name": "variable.other.lua"
				},
				"4": {
					"name": "punctuation.accessor.lua"
				},
				"5": {
					"name": "entity.other.inherited-class.lua"
				}
			},
			"endCaptures": {
				"0": {
					"name": "support.class.lua"
				}
			},
			"patterns": [
				{
					"include": "#class-content"
				}
			]
		},
		"function": {
			"name": "meta.function.lua",
			"begin": "(?=\\b(?:(public|private|internal)\\s+)?(?:static\\s+)?function\\s+[_[:alpha:]][_[:alnum:]]*)",
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "storage.type.function.property.lua"
				}
			},
			"patterns": [
				{
					"include": "#function-name"
				},
				{
					"include": "#general"
				}
			]
		},
		"function-name": {
			"name": "meta.function.lua",
			"begin": "\\b(?:(public|private|internal)\\s+)?(?:(static)\\s+)?(function)\\s+([_[:alpha:]][_[:alnum:]]*)(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.public.lua"
				},
				"2": {
					"name": "storage.modifier.static.lua"
				},
				"3": {
					"name": "storage.type.function.lua"
				},
				"4": {
					"name": "entity.name.function.lua"
				}
			},
			"end": "(?<=\\))\\s*(\\:)\\s*\\b(int|string|real|boolean|datetime|void|[_[:alpha:]][_[:alnum:]]*)\\b",
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.parameter.lua"
				},
				"2": {
					"name": "support.type.lua"
				}
			},
			"patterns": [
				{
					"include": "#param-declaration"
				}
			]
		},
		"external": {
			"name": "meta.function.lua",
			"begin": "\\b(?:(public|private|internal)\\b\\s+)?(?:(static)\\s+)?\\b(extern)\\b\\s+([_[:alpha:]][_[:alnum:]]*)(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.public.lua"
				},
				"2": {
					"name": "storage.modifier.static.lua"
				},
				"3": {
					"name": "storage.type.function.lua"
				},
				"4": {
					"name": "entity.name.function.lua"
				}
			},
			"end": "(?<=\\))\\s*(\\:)\\s*\\b(int|string|real|boolean|datetime|void|[_[:alpha:]][_[:alnum:]]*)\\b\\s*;",
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.parameter.lua"
				},
				"2": {
					"name": "support.type.lua"
				}
			},
			"patterns": [
				{
					"include": "#param-declaration"
				}
			]
		},
		"support-function-call": {
			"begin": "\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\s*[\\({]",
			"beginCaptures": {
				"1": {
					"name": "meta.function-call.lua support.function"
				}
			},
			"end": "[\\)}]",
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"support-string-function-call": {
			"begin": "\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\s*(?=[\\'\"]|\\[\\[)",
			"beginCaptures": {
				"1": {
					"name": "meta.function-call.lua support.function"
				}
			},
			"end": "(?<=[\\'\"]|\\]\\])",
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"function-call": {
			"begin": "(?=(?:[_[:alpha:]][_[:alnum:]]*[\\.:])*)([_[:alpha:]][_[:alnum:]]*)\\s*[\\({]",
			"beginCaptures": {
				"1": {
					"name": "meta.function-call.lua entity.name.function"
				}
			},
			"end": "[\\)}]",
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"string-function-call": {
			"begin": "(?=(?:[_[:alpha:]][_[:alnum:]]*[\\.:])*)([_[:alpha:]][_[:alnum:]]*)\\s*(?=[\\'\"]|\\[\\[)",
			"beginCaptures": {
				"1": {
					"name": "meta.function-call.lua entity.name.function"
				}
			},
			"end": "(?<=[\\'\"]|\\]\\])",
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"table": {
			"name": "meta.table.lua",
			"begin": "{",
			"end": "}",
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"array": {
			"name": "meta.array.lua",
			"begin": "\\[",
			"end": "\\]",
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"table-property": {
			"match": "(\\.)([_[:alpha:]][_[:alnum:]]*)\\b(?!\\s*([\\({\\'\"]|\\[\\[))",
			"captures": {
				"1": {
					"name": "punctuation.accessor"
				},
				"2": {
					"name": "variable.other.table.property.lua"
				}
			}
		},
		"language-variable": {
			"name": "variable.language.lua",
			"match": "\\b(this|super)\\b"
		},
		"support-variable": {
			"name": "support.variable.lua",
			"match": "\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall|coroutine|string|table|math|io|os|package|debug)\\b"
		},
		"variable": {
			"name": "variable.other.lua",
			"match": "\\b[_[:alpha:]][_[:alnum:]]*\\b"
		}
	}
}
