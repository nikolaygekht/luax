@TestSuite()
class forTest
    public static function factorial(a : int) : int
       assert.isTrue(a >= 1, "The value must be greater than 0");
       var result : int, i : int;
       result = 1;
       for i = 1, a, 1 do
         result = result * i;
       end
       return result;
    end

    @Theory()
    @TheoryData(1, 1)
    @TheoryData(2, 2)
    @TheoryData(3, 6)
    @TheoryData(10, 3628800)
    public function testFactorial(arg : int, expected : int) : void
      var r: int;
      r = factorial(arg);
      assert.isTrue(r == expected, "expected: " .. expected .. ", but found: " .. r);
    end
    ------------------------------------------------------------

    -- Test Break
    ------------------------------------------------------------
    private static function fibonacci(arg : int) : int
      var i : int, a : int, b : int, c : int;
      a = 1;
      b = 1;
      for i = 3, arg, 1 do
         if i > arg then
            break;
         end
         c = a + b;
         a = b;
         b = c;
      end
      return b;
    end

    @Theory()
    @TheoryData(1, 1)
    @TheoryData(2, 1)
    @TheoryData(3, 2)
    @TheoryData(7, 13)
    @TheoryData(13, 233)
    @TheoryData(15, 610)
    public function testFibonacci(arg : int, expected : int) : void
      var r: int;
      r = fibonacci(arg);
      assert.isTrue(r == expected, "expected: " .. expected .. ", but found: " .. r);
    end
    ------------------------------------------------------------

    -- Test Continue
    ------------------------------------------------------------
    private static function dividesByThree(arg : int) : string
      var i : int, result : string;
      result = "";
      for i = 1, arg, 1 do
         if i % 3 ~= 0 then
            continue;
         end
         if stdlib.len(result) ~= 0 then
            result = result .. "_";
         end
         result = result .. i;
      end
      return result;
    end

    @Theory()
    @TheoryData(1, "")
    @TheoryData(3, "3")
    @TheoryData(10, "3_6_9")
    @TheoryData(15, "3_6_9_12_15")
    public function testDividesByThree(arg : int, expected : string) : void
      var r: string;
      r = dividesByThree(arg);
      assert.isTrue(r == expected, "expected: " .. expected .. ", but found: " .. r);
    end
    ------------------------------------------------------------

    -- Test nested For operators
    ------------------------------------------------------------
    public static function nestedForAction(sourceVal : int, multRep : int, rep : int) : int
      var i : int, j : int, subVal : int, val : int;
      val = 0;
      for i = rep, 1, -1 do
         subVal = 1;
         for j = multRep, 1, -1 do
            subVal = subVal * sourceVal;
         end
         val = val + subVal + 1;
      end
      return val;
    end

    @Theory()
    @TheoryData(1, -1, -1, 0)
    @TheoryData(1, 3, 4, 8)
    @TheoryData(2, 2, 3, 15)
    @TheoryData(3, 3, 5, 140)
    public function testNestedFor(sourceVal : int, multRep : int, rep : int, expected : int) : void
      var r: int;
      r = nestedForAction(sourceVal, multRep, rep);
      assert.isTrue(r == expected, "expected: " .. expected .. ", but found: " .. r);
    end
end