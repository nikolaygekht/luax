class assertTestAction_throwsFromCatch : action
    public function invoke() : void
        var ex : exception;
        try        
            throw exception.create(-1, "This exception should not be supressed in the catch block");
        catch ex
            assert.isTrue(ex.getMessage() == "This exception should not be supressed in the catch block", "");
            throw ex;
        end
    end
end

class assertTestAction_exceptionSupressed : action
    public function invoke() : void
        var ex : exception;
        try
            throw exception.create(-1, "This exception should be supressed in the catch block");
        catch ex
            assert.isTrue(ex.getMessage() == "This exception should be supressed in the catch block", "");
        end
    end
end

class assertTestAction_divideByZeroExceptionSupressed : action
    public function invoke() : void
        var ex : exception;
        try
            var a: int;
            a = 1/0; 
        catch ex
            assert.isTrue(ex.getMessage() == "Attempted to divide by zero.", "");
        end
    end
end

class assertTestAction_usingUninitializedVariableExceptionSupressed : action
    public function invoke() : void
        var ex : exception;
        try
            var x: list;
            x.add(nil);
        catch ex
            assert.isTrue(ex.getMessage() == "The object is not initialized yet", "");
        end
    end
end

class assertTestAction_callChainExceptionCaught : action
    public function invoke() : void
        var ex : exception;
        try
            f1();
        catch ex
            assert.isTrue(ex.getMessage() == "Exception from the bottom of the call chain. Function: f3()", "");
        end
    end
    private function f1() : void
        f2();
    end
    private function f2() : void
        f3();
    end
    private function f3() : void
        throw exception.create(-3, "Exception from the bottom of the call chain. Function: f3()");
    end
end

class assertTestAction_nestedTryCatch : action
    public function invoke() : void
        var ex : exception;
        try
            var ex2 : exception;
            try
                var ex3 : exception;
                try
                    throw exception.create(-3, "Exception from nested try 3");
                catch ex3
                    assert.isTrue(ex3.getMessage() == "Exception from nested try 3", "");
                    assert.isTrue(ex3.getCode() == -3, "");
                    throw exception.create(-2, ex3.getMessage()..". Rethrown to level 2");
                end
            catch ex2
                assert.isTrue(ex2.getMessage() == "Exception from nested try 3. Rethrown to level 2", "");
                assert.isTrue(ex2.getCode() == -2, "");
                throw exception.create(-1, ex2.getMessage()..". Rethrown to level 1");
            end
        catch ex
            assert.isTrue(ex.getMessage() == "Exception from nested try 3. Rethrown to level 2. Rethrown to level 1", "");
            assert.isTrue(ex.getCode() == -1, "");
        end
    end   
end

@TestSuite()
class tryCatchTest
    @Fact()
    public function exceptionSupressed() : void
        assert.doesNotThrow(new assertTestAction_exceptionSupressed(), "");
    end

    @Fact()
    public function throwsFromCatch() : void
        assert.throws(new assertTestAction_throwsFromCatch(), "");
    end

    @Fact()
    public function divideByZeroCatch() : void
        assert.doesNotThrow(new assertTestAction_divideByZeroExceptionSupressed(), "");
    end

    @Fact()
    public function uninitializedVarCatch() : void
        assert.doesNotThrow(new assertTestAction_usingUninitializedVariableExceptionSupressed(), "");
    end

    @Fact()
    public function callChainCatch() : void
        assert.doesNotThrow(new assertTestAction_callChainExceptionCaught(), "");
    end

    @Fact()
    public function nestedTryCatch() : void
        assert.doesNotThrow(new assertTestAction_nestedTryCatch(), "");
    end
end