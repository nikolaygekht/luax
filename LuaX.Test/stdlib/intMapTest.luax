@TestSuite()
class intMapTest
    class testMap : int_map
        public function testMap() : void
            super.int_map();
        end
    
        public function get(index : int) : listItem
            return cast<listItem>(super.get(index));
        end
    
        public function set(index : int, value : listItem) : void
            super.set(index, value);
        end
    end

    @Fact()
    public function create_empty() : void
        var m : int_map;
        m = new int_map();
        assert.doesNotEqual(m, nil, "value");
        assert.equals(typename(m), "int_map", "type");
        assert.equals(m.length(), 0, "size");
    end

    @Fact()
    public function set_get() : void
        var m : int_map;
        m = new int_map();
        m.set(1, listItem.create("value1"));
        m.set(2, listItem.create("value2"));
        m.set(2, listItem.create("changed value2"));
        assert.equals(m.length(), 2, "size");
        assert.equals((cast<listItem>(m.get(1))).name, "value1", "item 1");
        assert.equals((cast<listItem>(m.get(2))).name, "changed value2", "item 2");
    end

    @Fact()
    public function accessViaIndexer() : void
        var m : testMap;
        m = new testMap();
        m.set(1, listItem.create("value1"));
        m.set(2, listItem.create("value2"));

        assert.equals(m.length(), 2, "size");
        assert.equals(m[1].name, "value1", "item 1");
        assert.equals(m[2].name, "value2", "item 2");
    end

    @Fact()
    public function contains() : void
        var m : int_map;
        m = new int_map();
        m.set(1, listItem.create("value1"));
        m.set(2, listItem.create("value2"));
        assert.isTrue(m.contains(1), "item 1");
        assert.isTrue(m.contains(2), "item 2");
        assert.isFalse(m.contains(3), "item 3");
    end

    @Fact()
    public function accessToNonExistentKey() : void
        var m : int_map, thrown : boolean, ex : exception, item : object;        
        m = new int_map();

        thrown = false;
        try
            item = m[1];
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "request not existing key should thrown exception");

        thrown = false;
        try
            item = m.get(1);
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "request not existing key should thrown exception");
    end

    @Fact()
    public function remove() : void
        var m : int_map;
        m = new int_map();
        m.set(1, listItem.create("value1"));
        m.set(2, listItem.create("value2"));
        m.remove(1);
        assert.isFalse(m.contains(1), "item 1");
        assert.isTrue(m.contains(2), "item 2");
    end

    @Fact()
    public function keys() : void
        var m : int_map;
        var keys: int[];
        m = new int_map();
        m.set(1, listItem.create("value1"));
        m.set(2, listItem.create("value2"));
        keys = m.keys();
        assert.equals(keys.length, 2, "size");
        assert.equals(keys[0], 1, "item 1");
        assert.equals(keys[1], 2, "item 2");
    end

    @Fact()
    public function clear() : void
        var m : int_map;
        m = new int_map();
        m.set(1, listItem.create("value1"));
        m.set(2, listItem.create("value2"));
        assert.equals(m.length(), 2, "size");
        m.clear();
        assert.equals(m.length(), 0, "size");
    end
end