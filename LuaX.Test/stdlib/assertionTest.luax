
@TestSuite()
class assertionTest
    class throwingAction : action
        public function invoke() : void
            throw new exception();
        end
    end

    class nonThrowingAction : action
        public function invoke() : void
        end
    end

    class equalClassA
        public var x1 : int;
        public var x2 : real;
        public var x3 : string;
        @IgnoreInEquals()
        public var x4 : int;

        public static function create(a : int, b : real, c : string, d : int) : equalClassA
            var x : equalClassA;
            x = new equalClassA();
            x.x1 = a;
            x.x2 = b;
            x.x3 = c;
            x.x4 = d;
            return x;
        end
    end

    class equalClassB
        public var a : equalClassA;

        public static function create(a : int, b : real, c : string, d : int) : equalClassB
            var x : equalClassB;
            x = new equalClassB();
            x.a = new equalClassA();
            x.a.x1 = a;
            x.a.x2 = b;
            x.a.x3 = c;
            x.a.x4 = d;
            return x;
        end
    end

    @Fact()
    public function isTrue_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.isTrue(true, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function isFalse_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.isFalse(false, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");

    end

    @Fact()
    public function isTrue_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.isTrue(false, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function isFalse_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.isFalse(true, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function throws_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.throws(new throwingAction(), "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function throws_Fail() : void
    var thrown : boolean, ex : exception;

        try
            assert.throws(new nonThrowingAction(), "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function notThrows_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotThrow(new nonThrowingAction(), "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function notThrows_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotThrow(new throwingAction(), "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function approximatelyEquals_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.approximatelyEquals(1, 1.000_000_1, 0.000_001, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function approximatelyEquals_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.approximatelyEquals(1, 1.000_001, 0.000_000_1, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function equalsInt_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(123, 123, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function equalsIntToReal1_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(123.0, 123, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function equalsIntToReal2_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(123, 123.0, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function equalsReal_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(123.5, 123.5, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function equalsString_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals("abc", "abc", "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function equalsBoolean_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(true, true, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function equalsDatetime_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(stdlib.mkdate(2020, 09, 23), stdlib.mkdate(2020, 09, 23), "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function equalsNil1_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(nil, nil, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function equalsNil2_Success() : void
        var thrown : boolean, ex : exception, a : equalClassA, b : equalClassA;

        try
            assert.equals(a, b, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end


    @Fact()
    public function equalsInt1_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(123, 124, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function equalsInt2_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(123, "123", "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function equalsInt3_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(123, nil, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function equalsIntToReal1_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(123.1, 123, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function equalsIntToReal2_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(123, 123.1, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function equalsReal_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(123.5, 123.51, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function equalsString_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals("abc", "Abc", "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function equalsBoolean_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(true, false, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function equalsDatetime_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.equals(stdlib.mkdate(2020, 09, 23), stdlib.mkdate(2020, 09, 22), "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end


    @Fact()
    public function doesNotEqualInt_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(123, 124, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function doesNotEqualIntToReal1_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(123.1, 123, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function doesNotEqualIntToReal2_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(123, 123.1, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function doesNotEqualReal_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(123.5, 123.51, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function doesNotEqualString_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual("abc", "Abc", "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function doesNotEqualBoolean_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(true, false, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function doesNotEqualDatetime_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(stdlib.mkdate(2020, 09, 23), stdlib.mkdate(2020, 09, 24), "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function doesNotEqualNil1_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(nil, 1, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function doesNotEqualNil2_Success() : void
        var thrown : boolean, ex : exception, a : equalClassA, b : equalClassA;

        a = equalClassA.create(1, 2.0, "c", 5);
        try
            assert.doesNotEqual(a, b, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function doesNotEqualInt1_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(123, 124, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function doesNotEqualInt2_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(123, "123", "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function doesNotEqualInt3_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(123, nil, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function doesNotEqualIntToReal1_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(123.0, 123, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function doesNotEqualIntToReal2_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(123, 123.0, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function doesNotEqualReal_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(123.5, 123.5, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function doesNotEqualString_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual("abc", "abc", "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function doesNotEqualBoolean_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(true, true, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function doesNotEqualDatetime_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotEqual(stdlib.mkdate(2020, 09, 23), stdlib.mkdate(2020, 09, 23), "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Theory()
    @TheoryData(1, 1.5, "a", 3,
                1, 1.5, "a", 3, false)
    @TheoryData(1, 1.5, "a", 3,
                1, 1.5, "a", 4, false)
    @TheoryData(1, 1.5, "a", 3,
                1, 1.5, "b", 3, true)
    @TheoryData(1, 1.5, "a", 3,
                1, 2.5, "a", 3, true)
    @TheoryData(1, 1.5, "a", 3,
                2, 1.5, "a", 3, true)
    public function equalsClass_SameType(a1 : int, b1 : real, c1 : string, d1 : int,
                                         a2 : int, b2 : real, c2 : string, d2 : int,
                                         expected : boolean) : void
        var thrown : boolean, ex : exception, a : equalClassB, b : equalClassB;

        a = equalClassB.create(a1, b1, c1, d1);
        b = equalClassB.create(a2, b2, c2, d2);

        try
            assert.equals(a, b, "");
        catch ex
            thrown = true;
        end
        assert.equals(thrown, expected, "");
    end

    @Theory()
    @TheoryData(1, 1.5, "a", 3,
                1, 1.5, "a", 3, true)
    @TheoryData(1, 1.5, "a", 3,
                1, 1.5, "a", 4, true)
    @TheoryData(1, 1.5, "a", 3,
                1, 1.5, "b", 3, false)
    @TheoryData(1, 1.5, "a", 3,
                1, 2.5, "a", 3, false)
    @TheoryData(1, 1.5, "a", 3,
                2, 1.5, "a", 3, false)
    public function doesNotEqualClass_SameType(a1 : int, b1 : real, c1 : string, d1 : int,
                                            a2 : int, b2 : real, c2 : string, d2 : int,
                                            expected : boolean) : void
        var thrown : boolean, ex : exception, a : equalClassB, b : equalClassB;

        a = equalClassB.create(a1, b1, c1, d1);
        b = equalClassB.create(a2, b2, c2, d2);

        try
            assert.doesNotEqual(a, b, "");
        catch ex
            thrown = true;
        end
        assert.equals(thrown, expected, "");
    end

    @Fact()
    public function equalsClass_DifferentTypes() : void
        var thrown : boolean, ex : exception, a : equalClassB, b : equalClassB;

        a = equalClassB.create(2, 1.5, "a", 4);
        b = equalClassB.create(1, 1.5, "b", 4);

        try
            assert.equals(a, b, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

        @Fact()
    public function notEqualClass_DifferentTypes() : void
        var thrown : boolean, ex : exception, a : equalClassB, b : equalClassB;

        a = equalClassB.create(2, 1.5, "a", 4);
        b = equalClassB.create(1, 1.5, "b", 4);

        try
            assert.doesNotEqual(a, b, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Theory()
    @TheoryData("abc", "/B/i", false)
    @TheoryData("abc", "/B/", true)
    public function match(v : string, p : string, expected : boolean) : void
        var thrown : boolean, ex : exception;

        try
            assert.matches(v, p, "");
        catch ex
            thrown = true;
        end
        assert.equals(thrown, expected, "");
    end

    @Theory()
    @TheoryData("abc", "/B/i", true)
    @TheoryData("abc", "/B/", false)
    public function doesNotMatch(v : string, p : string, expected : boolean) : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotMatch(v, p, "");
        catch ex
            thrown = true;
        end
        assert.equals(thrown, expected, "");
    end


    @Theory()
    @TheoryData(0.9, 1.0, true)
    @TheoryData(1.0, 1.0, true)
    @TheoryData(1.1, 1.0, false)
    public function greater(v1 : real, v2 : real, expected : boolean) : void
        var thrown : boolean, ex : exception;
        try
            assert.greater(v1, v2, "");
        catch ex
            thrown = true;
        end
        assert.equals(thrown, expected, "");
    end

    @Theory()
    @TheoryData(0.9, 1.0, true)
    @TheoryData(1.0, 1.0, false)
    @TheoryData(1.1, 1.0, false)
    public function greaterOrEqual(v1 : real, v2 : real, expected : boolean) : void
        var thrown : boolean, ex : exception;
        try
            assert.greaterOrEqual(v1, v2, "");
        catch ex
            thrown = true;
        end
        assert.equals(thrown, expected, "");
    end

    @Theory()
    @TheoryData(0.9, 1.0, false)
    @TheoryData(1.0, 1.0, true)
    @TheoryData(1.1, 1.0, true)
    public function less(v1 : real, v2 : real, expected : boolean) : void
        var thrown : boolean, ex : exception;
        try
            assert.less(v1, v2, "");
        catch ex
            thrown = true;
        end
        assert.equals(thrown, expected, "");
    end

    @Theory()
    @TheoryData(0.9, 1.0, false)
    @TheoryData(1.0, 1.0, false)
    @TheoryData(1.1, 1.0, true)
    public function lessOrEqual(v1 : real, v2 : real, expected : boolean) : void
        var thrown : boolean, ex : exception;
        try
            assert.lessOrEqual(v1, v2, "");
        catch ex
            thrown = true;
        end
        assert.equals(thrown, expected, "");
    end
end