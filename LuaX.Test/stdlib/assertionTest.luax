class throwingAction : action
    public function invoke() : void
        throw new exception();
    end
end

class nonThrowingAction : action
    public function invoke() : void
    end
end

@TestSuite()
class assertionTest

    @Fact()
    public function isTrue_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.isTrue(true, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function isFalse_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.isFalse(false, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");

    end

    @Fact()
    public function isTrue_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.isTrue(false, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function isFalse_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.isFalse(true, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function throws_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.throws(new throwingAction(), "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function throws_Fail() : void
    var thrown : boolean, ex : exception;

        try
            assert.throws(new nonThrowingAction(), "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function notThrows_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotThrow(new nonThrowingAction(), "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function notThrows_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.doesNotThrow(new throwingAction(), "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end

    @Fact()
    public function approximatelyEquals_Success() : void
        var thrown : boolean, ex : exception;

        try
            assert.approximatelyEquals(1, 1.000_000_1, 0.000_001, "");
        catch ex
            thrown = true;
        end
        assert.isFalse(thrown, "");
    end

    @Fact()
    public function approximatelyEquals_Fail() : void
        var thrown : boolean, ex : exception;

        try
            assert.approximatelyEquals(1, 1.000_001, 0.000_000_1, "");
        catch ex
            thrown = true;
        end
        assert.isTrue(thrown, "");
    end
end