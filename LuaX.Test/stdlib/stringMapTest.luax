@TestSuite()
class stringMapTest
    -- subclassing list. pay attention that constructor is overriden!!!
    class testStringMap : string_map
        public function testStringMap() : void
            super.string_map();
        end

        public function get(key : string) : listItem
            return cast<listItem>(super.get(key));
        end

        public function set(key : string, value : listItem) : void
            super.set(key, value);
        end
    end

    @Fact()
    public function create_empty_viaNew() : void
        var m : string_map;
        m = new string_map();
        assert.doesNotEqual(m, nil, "value");
        assert.equals(typename(m), "string_map", "type");
        assert.equals(m.length(), 0, "size");
    end

    @Fact()
    public function set_get() : void
        var m : testStringMap;
        m = new testStringMap();
        m.set("key", listItem.create("value1"));
        m.set("key2", listItem.create("value2"));
        m.set("key2", listItem.create("changed value2"));
        assert.equals(m.length(), 2, "size");
        assert.equals(m.get("key").name, "value1", "item 1");
        assert.equals(m.get("key2").name, "changed value2", "item 2");
    end

    @Fact()
    public function access() : void
        var m : testStringMap;
        m = new testStringMap();
        m.set("key", listItem.create("value1"));
        m.set("key2", listItem.create("value2"));
        m.set("key2", listItem.create("changed value2"));
        assert.equals(m.length(), 2, "size");
        assert.equals(m["key"].name, "value1", "item 1");
        assert.equals(m["key2"].name, "changed value2", "item 2");
    end

    @Fact()
    public function accessToNonExistingKey() : void
        var m : testStringMap;
        var hasException : boolean;
        var item : listItem;
        var ex : exception;
        m = new testStringMap();
        assert.equals(m.length(), 0, "size");

        hasException = false;
        try
            item = m["key3"];
        catch ex
            hasException = true;
        end
        assert.isTrue(hasException, "request not existing key should thrown exception");

        hasException = false;
        try
            item = m.get("key3");
        catch ex
            hasException = true;
        end
        assert.isTrue(hasException, "request not existing key should thrown exception");
    end

    @Fact()
    public function contains() : void
        var m : string_map;
        m = new string_map();
        m.set("key", listItem.create("value1"));
        m.set("key2", listItem.create("value2"));
        assert.isTrue(m.contains("key"), "item 1");
        assert.isTrue(m.contains("key2"), "item 2");
        assert.isFalse(m.contains("key3"), "item 3");
    end

    @Fact()
    public function remove() : void
        var m : string_map;
        m = new string_map();
        m.set("key", listItem.create("value1"));
        m.set("key2", listItem.create("value2"));
        m.remove("key");
        assert.isFalse(m.contains("key"), "item 1");
        assert.isTrue(m.contains("key2"), "item 2");
    end

    @Fact()
    public function keys() : void
        var m : string_map;
        var keys: string[];
        m = new string_map();
        m.set("key", listItem.create("value1"));
        m.set("key2", listItem.create("value2"));
        keys = m.keys();
        assert.equals(keys.length, 2, "size");
        assert.equals(keys[0], "key", "item 1");
        assert.equals(keys[1], "key2", "item 2");
    end

    @Fact()
    public function clear() : void
        var m : string_map;
        m = new string_map();
        m.set("key", listItem.create("value1"));
        m.set("key2", listItem.create("value2"));
        assert.equals(m.length(), 2, "size");
        m.clear();
        assert.equals(m.length(), 0, "size");
    end

end

