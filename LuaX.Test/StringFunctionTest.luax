@TestSuite()
class StringFunctionTests
    @Fact()
    public function check_length() : void
        var v: int;
        v = stdlib.len("string");
        assert.isTrue(v == 6, "length result expected '6' but found '" .. v .. "'");
    end

    @Fact()
    public function check_indexOf() : void
        var v: int;
        v = stdlib.indexOf("string", "i");
        assert.isTrue(v == 3, "indexOf result expected '3' but found '" .. v .. "'");
    end

    @Fact()
    public function check_left() : void
        var v: string;
        v = stdlib.left("string", 3);
        assert.isTrue(v == "str", "left result expected 'str' but found '" .. v .. "'");
    end

    @Fact()
    public function check_trim() : void
        var v: string;
        v = stdlib.trim(" string    ");
        assert.isTrue(v == "string", "trim result expected 'string' but found '" .. v .. "'");
    end

    @Fact()
    public function check_right() : void
        var v: string;
        v = stdlib.right("string", 3);
        assert.isTrue(v == "ing", "right result expected 'ing' but found '" .. v .. "'");
    end

    @Fact()
    public function check_substring() : void
        var v: string;
        v = stdlib.substring("string", 2, 2);
        assert.isTrue(v == "ri", "substring result expected 'ri' but found '" .. v .. "'");
    end

    @Fact()
    public function check_match_true() : void
        var v: boolean;
        v = stdlib.match("string", "^[\\w]*$");
        assert.isTrue(v, "match");
    end

    @Fact()
    public function check_match_false() : void
        var v: boolean;
        v = stdlib.match("string", "^[\\d]*$");
        assert.isFalse(v, "match");
    end
    
    @Fact()
    public function check_unicode() : void
        var v: int;
        v = stdlib.unicode("s");
        assert.isTrue(v == 115, "unicode result expected '115' but found '" .. v .. "'");
    end
    
    @Fact()
    public function check_char() : void
        var v: string;
        v = stdlib.char(115);
        assert.isTrue(v == "s", "char result expected 's' but found '" .. v .. "'");
    end
    
    @Fact()
    public function check_parse() : void
        var v: string[];
        v = new string[3];
        v = stdlib.parse("some small text", "[\\w]+");
        assert.isTrue(v.length == 3, "parse result length expected '3' but found '" .. v.length .. "'");
        assert.isTrue(v[0] == "some", "first item of result for 'parse' function expected as 'some' but found '" .. v[0] .. "'");
        assert.isTrue(v[1] == "small", "second item of result for 'parse' function expected as 'small' but found '" .. v[1] .. "'");
        assert.isTrue(v[2] == "text", "third item of result for 'parse' function expected as 'text' but found '" .. v[2] .. "'");
    end
end