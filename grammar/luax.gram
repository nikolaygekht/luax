grammar LuaX
{
    options
    {
        Axiom = "ROOT";
        Separator = "SEPARATOR";
        ParserType = "RNGLR";
    }

    terminals
    {
        NEW_LINE -> U+000D /* CR */
                 |  U+000A /* LF */
                 |  U+000D U+000A /* CR LF */
                 |  U+0085 // Next line character
                 |  U+2028 // Line separator character
                 |  U+2029 ; //Paragraph separator character (U+2029)

        WHITE_SPACE -> U+0020 | U+0009 | U+000B | U+000C | U+000d | U+000a;

        INTEGER -> [0-9] [0-9_]* [0-9]?;

        HEX_INTEGER -> '0' 'x' [0-9A-Fa-f] [0-9A-Fa-f_]* [0-9A-Fa-f]?;

        REAL -> [0-9] [0-9_]* [0-9]? '.' [0-9_]* [0-9]? ([Ee] ('+'|'-')? [0-9] [0-9_]*)?;

        STRINGDQ -> '"' ( (. - ('"' | '\\')) |
                               ('\\' ('"' | '\\' | 'r' | 'n' | 'b' | 't')) |
                               ('\\' [0-9] [0-9] [0-9]) |
                               ('\\' 'x' [0-9a-fA-F] [0-9a-fA-F])
                        )*  '"';

        COMMENT_LINE    -> '--' (.* - (.* NEW_LINE .*)) ;
        IDENTIFIER  -> [a-zA-Z_] [a-zA-Z0-9_]* ;
        SEPARATOR   -> WHITE_SPACE | COMMENT_LINE | NEW_LINE;
    }

    rules {
        NIL -> 'nil';

        BOOLEAN_TRUE -> 'true';

        BOOLEAN_FALSE -> 'false';

        BOOLEAN -> BOOLEAN_TRUE | BOOLEAN_FALSE;

        STRING -> STRINGDQ;

        NEGATIVE_INTEGER -> MINUS_OP INTEGER;

        NEGATIVE_REAL -> MINUS_OP REAL;

        CONSTANT -> NIL |
                    BOOLEAN |
                    STRING |
                    INTEGER |
                    HEX_INTEGER |
                    NEGATIVE_INTEGER |
                    REAL |
                    NEGATIVE_REAL;

        TYPE_INT -> 'int';

        TYPE_REAL -> 'real';

        TYPE_BOOLEAN -> 'boolean';

        TYPE_STRING -> 'string';

        TYPE_DATETIME -> 'datetime';

        TYPE_VOID -> 'void';

        TYPE_CLASS -> IDENTIFIER;

        TYPE_NAME -> TYPE_INT |
                     TYPE_REAL |
                     TYPE_BOOLEAN |
                     TYPE_STRING |
                     TYPE_DATETIME |
                     TYPE_VOID |
                     IDENTIFIER;

        TYPE_DECL -> TYPE_NAME ARRAY_DECL?;

        COLON -> ':';
        COMMA -> ',';

        DECL -> IDENTIFIER COLON TYPE_DECL;

        DECL_LIST -> DECL (COMMA DECL)*;

        L_SQUARE_BRACKET -> '['!;
        R_SQUARE_BRACKET -> ']'!;

        ARRAY_DECL -> L_SQUARE_BRACKET R_SQUARE_BRACKET;

        VARIABLE -> IDENTIFIER;

        PROPERTY_ACCESS -> '.';

        PROPERTY -> CALLABLE_EXPR PROPERTY_ACCESS IDENTIFIER;

        ARRAY_ELEMENT -> CALLABLE_EXPR L_SQUARE_BRACKET REXPR R_SQUARE_BRACKET;

        ASSIGN_TARGET -> VARIABLE | PROPERTY | ARRAY_ELEMENT;

        CALL_ARGS -> REXPR (','! REXPR)*;

        L_ROUND_BRACKET -> '('!;
        R_ROUND_BRACKET -> ')'!;

        CALL_BRACKET -> L_ROUND_BRACKET CALL_ARGS? R_ROUND_BRACKET;

        LOCAL_CALL -> IDENTIFIER CALL_BRACKET;

        METHOD_CALL -> CALLABLE_EXPR PROPERTY_ACCESS IDENTIFIER CALL_BRACKET;

        CALL -> LOCAL_CALL | METHOD_CALL;

        ASSIGN -> '=';

        FIELD_ASSIGNMENT -> IDENTIFIER ASSIGN REXPR;

        NEW -> 'new';

        NEW_ARRAY_EXPR -> NEW TYPE_NAME L_SQUARE_BRACKET REXPR R_SQUARE_BRACKET;

        NEW_TABLE_EXPR -> NEW IDENTIFIER L_ROUND_BRACKET R_ROUND_BRACKET;

        METHOD -> CALLABLE_EXPR COLON IDENTIFIER;

        CALLABLE_EXPR -> ASSIGN_TARGET |
                         METHOD |
                         CALL |
                         BRACKET_EXPR;

        BRACKET_EXPR -> L_ROUND_BRACKET REXPR R_ROUND_BRACKET;

        ARRAY_ACCESS -> CALLABLE_EXPR L_SQUARE_BRACKET REXPR R_SQUARE_BRACKET;

        SIMPLE_EXPR -> CONSTANT |
                       CALLABLE_EXPR |
                       BRACKET_EXPR |
                       ARRAY_ACCESS;

        MINUS_OP -> '-';
        PLUS_OP -> '+';
        CAST -> 'cast';
        L_SHARP_BRACKET -> '<';
        R_SHARP_BRACKET -> '>';
        CAST_OP -> CAST L_SHARP_BRACKET TYPE_NAME R_SHARP_BRACKET;

        TYPENAME -> 'typename';

        TYPENAME_OP -> TYPENAME;

        UNARY_EXPR -> SIMPLE_EXPR |
                      CAST_OP^ L_ROUND_BRACKET REXPR R_ROUND_BRACKET |
                      TYPENAME_OP^ L_ROUND_BRACKET REXPR R_ROUND_BRACKET |
                      MINUS_OP^ REXPR |
                      PLUS_OP^ REXPR;

        POWER_OP -> '^';

        POWER_EXPR -> UNARY_EXPR |
                      POWER_EXPR POWER_OP^ UNARY_EXPR;

        MUL_OP -> '*';
        DIV_OP -> '/';
        REM_OP -> '%';

        MUL_EXPR -> POWER_EXPR |
                    MUL_EXPR MUL_OP^ POWER_EXPR |
                    MUL_EXPR DIV_OP^ POWER_EXPR |
                    MUL_EXPR REM_OP^ POWER_EXPR;

        CONCAT_OP -> '..';


        ADD_EXPR -> MUL_EXPR |
                    ADD_EXPR CONCAT_OP^ MUL_EXPR |
                    ADD_EXPR PLUS_OP^ MUL_EXPR |
                    ADD_EXPR MINUS_OP^ MUL_EXPR;

        EQ_OP -> '==';
        NEQ_OP -> '~=' | '!=';
        GT_OP -> '>';
        GE_OP -> '>=';
        LT_OP -> '<';
        LE_OP -> '<=';

        REL_EXPR -> ADD_EXPR |
                    REL_EXPR EQ_OP^ ADD_EXPR |
                    REL_EXPR NEQ_OP^ ADD_EXPR |
                    REL_EXPR GT_OP^ ADD_EXPR |
                    REL_EXPR GE_OP^ ADD_EXPR |
                    REL_EXPR LT_OP^ ADD_EXPR |
                    REL_EXPR LE_OP^ ADD_EXPR;

        NOT_OP -> 'not';
        AND_OP -> 'and';
        OR_OP -> 'or';

        UX_BOOL_EXPR -> REL_EXPR |
                        NOT_OP^ REL_EXPR;

        AND_BOOL_EXPR -> UX_BOOL_EXPR |
                         AND_BOOL_EXPR AND_OP^ UX_BOOL_EXPR;

        OR_BOOL_EXPR -> AND_BOOL_EXPR |
                        OR_BOOL_EXPR OR_OP^ AND_BOOL_EXPR;

        EXPR -> OR_BOOL_EXPR;

        EOS -> ';';

        NOP -> EOS;

        REXPR -> EXPR | NEW_ARRAY_EXPR | NEW_TABLE_EXPR;

        ASSIGN_STMT -> ASSIGN_TARGET ASSIGN REXPR EOS;

        VAR -> 'var';

        CONST_KW -> 'const';

        DECLARATION -> VAR DECL_LIST EOS;

        CONST_DECLARATION -> CONST_KW IDENTIFIER ASSIGN CONSTANT EOS;

        RETURN -> 'return';

        RETURN_STMT ->  RETURN REXPR? EOS;

        CATCH -> 'catch';

        END -> 'end';

        CATCH_CLAUSE -> CATCH IDENTIFIER STATEMENTS;

        TRY -> 'try';

        TRY_STMT -> TRY STATEMENTS CATCH_CLAUSE END;

        THROW -> 'throw';

        THROW_STMT -> THROW REXPR EOS;

        CALL_STMT -> CALL EOS;

        IF -> 'if';
        THEN -> 'then';
        ELSE -> 'else';
        ELSEIF -> 'elseif';

        ELSEIF_CLAUSE -> ELSEIF EXPR THEN STATEMENTS;

        ELSE_CLAUSE -> ELSE STATEMENTS;

        IF_CLAUSE -> IF EXPR THEN STATEMENTS;

        IF_STMT ->  IF_CLAUSE
                    ELSEIF_CLAUSE*
                    ELSE_CLAUSE?
                    END;

        WHILE -> 'while';
        DO -> 'do';

        WHILE_STMT -> WHILE EXPR DO STATEMENTS END;

        REPEAT -> 'repeat';
        UNTIL -> 'until';

        REPEAT_STMT -> REPEAT STATEMENTS UNTIL EXPR;

        FOR_STMT_LOOP -> IDENTIFIER ASSIGN EXPR COMMA EXPR (COMMA EXPR)?;

        FOR -> 'for';

        FOR_STMT -> FOR FOR_STMT_LOOP DO STATEMENTS END;

        IN -> 'in';

        FORIN_STMT_LOOP -> IDENTIFIER IN EXPR;

        FOR_IN_STMT -> FOR FORIN_STMT_LOOP DO STATEMENTS END;

        BREAK -> 'break';
        CONTINUTE -> 'continue';

        BREAK_STMT -> BREAK EOS;

        CONTINUE_STMT -> CONTINUTE EOS;

        STATEMENT -> DECLARATION |
                     CONST_DECLARATION |
                     ASSIGN_STMT |
                     RETURN_STMT |
                     CALL_STMT |
                     IF_STMT |
                     WHILE_STMT |
                     REPEAT_STMT |
                     FOR_STMT |
                     FOR_IN_STMT |
                     BREAK_STMT |
                     CONTINUE_STMT |
                     TRY_STMT |
                     THROW_STMT |
                     NOP;

        STATEMENTS -> STATEMENT* ;

        FUNCTION_DECLARATION_ARGS -> L_ROUND_BRACKET DECL_LIST? R_ROUND_BRACKET;

        CONSTANTS -> CONSTANT (COMMA CONSTANT)*;

        AT -> '@';

        ATTRIBUTE -> AT IDENTIFIER L_ROUND_BRACKET CONSTANTS? R_ROUND_BRACKET;

        ATTRIBUTES -> ATTRIBUTE ATTRIBUTE*;

        STATIC -> 'static';

        VISIBILITY_PUBLIC -> 'public';

        VISIBILITY_PRIVATE -> 'private';

        VISIBILITY_INTERNAL -> 'internal';

        VISIBILITY -> VISIBILITY_PUBLIC | VISIBILITY_PRIVATE | VISIBILITY_INTERNAL;

        FUNCTION -> 'function';

        FUNCTION_DECLARATION -> ATTRIBUTES? VISIBILITY? STATIC? FUNCTION IDENTIFIER FUNCTION_DECLARATION_ARGS ':'! TYPE_DECL STATEMENTS? 'end'!;

        EXTERN -> 'extern';

        EXTERN_DECLARATION -> VISIBILITY? STATIC? EXTERN IDENTIFIER FUNCTION_DECLARATION_ARGS ':'! TYPE_DECL EOS;

        PARENT_CLASS -> COLON IDENTIFIER;

        PROPERTY -> VISIBILITY? STATIC? DECLARATION;

        CLASS_ELEMENT -> PROPERTY | CONST_DECLARATION | FUNCTION_DECLARATION | EXTERN_DECLARATION;

        CLASS -> 'class';

        CLASS_DECLARATION -> ATTRIBUTES? CLASS IDENTIFIER PARENT_CLASS? CLASS_ELEMENT* END;

        ROOT -> CLASS_DECLARATION*;
    }
}